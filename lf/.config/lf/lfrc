# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set icons

set info size

set dircounts

# set cursorpreviewfmt "\033[7;90m"

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map r push :open-with<space>

map d
map dd cut
map dD delete
map dT trash

map y
map yy copy
map yS share

map p
map pp paste
map pl link
map pL link-relative

map a rename
# map A rename-append

map . set hidden!

map w #unmap shell to w
map S $$SHELL

map D &dragon-drop -a $fx # Dragon drag and drop
map C &cat $f | xclip -selection clipboard # Copy contents of file to clipboard

map t :tag-toggle "ï€Œ"; down

map st :set sortby time; set info time; set reverse
map sn :set sortby natural; set info size; set noreverse

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid rifle $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd open-with %"$@" "$fx"

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash
cmd trash %trash-put $fx

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# cmd extract ${{
    # set -f
    # case $f in
        # *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        # *.tar.gz|*.tgz) tar xzvf $f;;
        # *.tar.xz|*.txz) tar xJvf $f;;
        # *.zip) unzip $f;;
        # *.rar) unrar x $f;;
        # *.7z) 7z x $f;;
    # esac
# }}

cmd extract ${{
    set -f
    atool -xD $f
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd link-relative %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    ln -sr -t . -- "$@"
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    ln -s -t . -- "$@"
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd share $curl -F"file=@$fx" https://0x0.st | xclip -selection c

# Edit the current filename
cmd rename-append ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<enter>$filename"
}}

# Edit filename before the extension
cmd rename-append-extension ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<enter>$filename<a-b><c-b>"
}}

cmd on-cd &{{
    case "$PWD" in
        $HOME/Downloads*)
            lf -remote "send $id set user_prev_sortby $lf_sortby"
            lf -remote "send $id set sortby time"
            lf -remote "send $id set reverse"
            ;;
        *)
            # restore sorting on directory exit
            if [[ "$lf_user_prev_sortby" != "" ]]; then
                lf -remote "send $id set sortby $lf_user_prev_sortby"
                lf -remote "send $id set noreverse"
                lf -remote "send $id set user_prev_sortby ''"
            fi
            ;;
    esac
}}

# run on startup too
on-cd
